
public class test {

	public static void main(String[] args) {
		String s = "";
		System.out.println(s.length());
		byte[] ba = s.getBytes();	
		String encoded = asciiEncode(ba);
		System.out.println("Encoded: " + encoded);
		ba = asciiDecode(encoded);
		encoded = asciiEncode(ba);
		System.out.println("Encoded: " + encoded);
	}
private static byte[] asciiDecode(String encoded){
		
		int count = (encoded.length()) ;
		String one;
		String two; 
		String three;
		String four;
		String binary = "";
		String current = null;
		String total = "";
		for(int i = 0; i <= count; i++){
			if(encoded.length()-1 >=i)
				one = Character.toString(encoded.charAt(i));
			else 
				one = "";
			if(encoded.length()-1 >=i+1)
				two = Character.toString(encoded.charAt(++i));
			else 
				two = "";
			if(encoded.length()-1 >=i+2)
			three = Character.toString(encoded.charAt(++i));
			else 
				three = "";
				if(encoded.length()-1 >=i+3)
			four = Character.toString(encoded.charAt(++i));
			else 
				four = "";
			for(int j = 0; j < 4; j++){
				switch(j){
				case 0: current = one;
				break;
				case 1: current = two;
				break;
				case 2: current = three;
				break;
				case 3: current = four;
				break;
				default: break;
				}
						
			switch(current){
			case "A": binary = binary + "000000";
			break;	
			case "B": binary = binary + "000001";
			break;	
			case "C": binary = binary + "000010";
			break;	
			case "D": binary = binary + "000011";
			break;	
			case "E": binary = binary + "000100";
			break;	
			case "F": binary = binary + "000101";
			break;	
			case "G": binary = binary + "000110";
			break;	
			case "H": binary = binary + "000111";
			break;	
			case "I": binary = binary + "001000";
			break;	
			case "J": binary = binary + "001001";
			break;	
			case "K": binary = binary + "001010";
			break;	
			case "L": binary = binary + "001011";
			break;	
			case "M": binary = binary + "001100";
			break;	
			case "N": binary = binary + "001101";
			break;	
			case "O": binary = binary + "001110";
			break;	
			case "P": binary = binary + "001111";
			break;		
			case "Q": binary = binary + "010000";
			break;	
			case "R": binary = binary + "010001";
			break;	
			case "S": binary = binary + "010010";
			break;	
			case "T": binary = binary + "010011";
			break;	
			case "U": binary = binary + "010100";
			break;	
			case "V": binary = binary + "010101";
			break;	
			case "W": binary = binary + "010110";
			break;	
			case "X": binary = binary + "010111";
			break;	
			case "Y": binary = binary + "011000";
			break;	
			case "Z": binary = binary + "011001";
			break;	
			case "a": binary = binary + "011010";
			break;	
			case "b": binary = binary + "011011";
			break;	
			case "c": binary = binary + "011100";
			break;	
			case "d": binary = binary + "011101";
			break;	
			case "e": binary = binary + "011110";
			break;	
			case "f": binary = binary + "011111";
			break;
			case "g": binary = binary + "100000";
			break;	
			case "h": binary = binary + "100001";
			break;	
			case "i": binary = binary + "100010";
			break;	
			case "j": binary = binary + "100011";
			break;	
			case "k": binary = binary + "100100";
			break;	
			case "l": binary = binary + "100101";
			break;	
			case "m": binary = binary + "100110";
			break;	
			case "n": binary = binary + "100111";
			break;	
			case "o": binary = binary + "101000";
			break;	
			case "p": binary = binary + "101001";
			break;	
			case "q": binary = binary + "101010";
			break;	
			case "r": binary = binary + "101011";
			break;	
			case "s": binary = binary + "101100";
			break;	
			case "t": binary = binary + "101101";
			break;	
			case "u": binary = binary + "101110";
			break;	
			case "v": binary = binary + "101111";
			break;		
			case "w": binary = binary + "110000";
			break;	
			case "x": binary = binary + "110001";
			break;	
			case "y": binary = binary + "110010";
			break;	
			case "z": binary = binary + "110011";
			break;	
			case "0": binary = binary + "110100";
			break;	
			case "1": binary = binary + "110101";
			break;	
			case "2": binary = binary + "110110";
			break;	
			case "3": binary = binary + "110111";
			break;	
			case "4": binary = binary + "111000";
			break;	
			case "5": binary = binary + "111001";
			break;	
			case "6": binary = binary + "111010";
			break;	
			case "7": binary = binary + "111011";
			break;	
			case "8": binary = binary + "111100";
			break;	
			case "9": binary = binary + "111101";
			break;	
			case "+": binary = binary + "111110";
			break;	
			case "/": binary = binary + "111111";
			break;
			case "=": 				 
					  break;		
		default: ;
		break;	
		}	
			}	
			int length = binary.length() - binary.length()%8;
			binary = binary.substring(0, length);
			total = total + binary;
			binary = "";
		}
		byte[] ret = new byte[total.length()/8];
		for(int i = 0; i < ret.length; i++){
			ret[i] = (byte) Integer.parseInt(total.substring(i * 8, (i * 8) + 8), 2);
			
		}	
		
		return ret;
		
	}
		private static String asciiEncode(byte[] ba) {
		int[] c = new int[((ba.length/3)*24)+24];
		String six = "";
		String encoded = "";
		int counter = 0;
		int bcounter = 0;
	
		boolean check = false;
		if(ba.length ==0 ){
			check = true;
		}
		for(int i = 0; i <= ba.length/3; i++){
		
		for(int j = 0; j < 8; j++){
			if(bcounter < (ba.length) && check == false){

			c[counter] = ba[bcounter]>>(8-(j+1)) &0x0001;
			}
			else if(check == true){
				
				c[counter] = 2;
			}
			else if(j == 7){
				check = true;
				c[counter] = 2;
			}
			else{
				c[counter] = 0;
				if(j == 0){
					c[counter] = 2;	
				}
			}
		counter++;
		
		}
		for(int k = 8; k < 16; k++){
			if(bcounter +1 < ba.length  && check == false){
			c[counter] = ba[bcounter+1]>>(8-((k%8)+1)) &0x0001;
			
			}
			else if(check == true){
				c[counter] = 2;
				
			}
			else if(k == 15){
				check = true;
				c[counter] =2;
				
			}
			else{
				c[counter] = 0;
				if(k == 0){
					c[counter] = 2;	
				}
			}
			
		counter++;
		}
		for(int l = 16; l < 24; l++){
			if(bcounter+2 < (ba.length )  && check == false){
			c[counter] = ba[bcounter+2]>>(8-((l%8)+1)) &0x0001;
			}
			else if(check == true){
				c[counter] = 2;
			}
			else if(l == 23){
				check = true;
				c[counter] = 2;
			}
			else{
				c[counter] = 0;
				if(l == 0){
					c[counter] = 2;	
				}
			}
		counter++;
		}
	bcounter = bcounter + 3;
		}
		
		
		
		int sixCounter = 0;

		for(int i = 0; i < c.length;i++){
			
		
			six = six + Integer.toString(c[i]);
			sixCounter++;
			
			if (sixCounter%6 ==0){
		
				switch(six){
					case "000000": encoded = encoded + "A";
					break;	
					case "000001": encoded = encoded + "B";
					break;
					case "000010": encoded = encoded + "C";
					break;
					case "000011": encoded = encoded + "D";
					break;
					case "000100": encoded = encoded + "E";
					break;
					case "000101": encoded = encoded + "F";
					break;
					case "000110": encoded = encoded + "G";
					break;
					case "000111": encoded = encoded + "H";
					break;
					case "001000": encoded = encoded + "I";
					break;	
					case "001001": encoded = encoded + "J";
					break;
					case "001010": encoded = encoded + "K";
					break;
					case "001011": encoded = encoded + "L";
					break;
					case "001100": encoded = encoded + "M";
					break;
					case "001101": encoded = encoded + "N";
					break;
					case "001110": encoded = encoded + "O";
					break;
					case "001111": encoded = encoded + "P";
					break;
					case "010000": encoded = encoded + "Q";
					break;	
					case "010001": encoded = encoded + "R";
					break;
					case "010010": encoded = encoded + "S";
					break;
					case "010011": encoded = encoded + "T";
					break;
					case "010100": encoded = encoded + "U";
					break;
					case "010101": encoded = encoded + "V";
					break;
					case "010110": encoded = encoded + "W";
					break;
					case "010111": encoded = encoded + "X";
					break;
					case "011000": encoded = encoded + "Y";
					break;	
					case "011001": encoded = encoded + "Z";
					break;
					case "011010": encoded = encoded + "a";
					break;
					case "011011": encoded = encoded + "b";
					break;
					case "011100": encoded = encoded + "v";
					break;
					case "011101": encoded = encoded + "d";
					break;
					case "011110": encoded = encoded + "e";
					break;
					case "011111": encoded = encoded + "f";
					break;
					case "100000": encoded = encoded + "g";
					break;	
					case "100001": encoded = encoded + "h";
					break;
					case "100010": encoded = encoded + "i";
					break;
					case "100011": encoded = encoded + "j";
					break;
					case "100100": encoded = encoded + "k";
					break;
					case "100101": encoded = encoded + "l";
					break;
					case "100110": encoded = encoded + "m";
					break;
					case "100111": encoded = encoded + "n";
					break;
					case "101000": encoded = encoded + "o";
					break;	
					case "101001": encoded = encoded + "p";
					break;
					case "101010": encoded = encoded + "q";
					break;
					case "101011": encoded = encoded + "r";
					break;
					case "101100": encoded = encoded + "s";
					break;
					case "101101": encoded = encoded + "t";
					break;
					case "101110": encoded = encoded + "u";
					break;
					case "101111": encoded = encoded + "v";
					break;
					case "110000": encoded = encoded + "s";
					break;	
					case "110001": encoded = encoded + "x";
					break;
					case "110010": encoded = encoded + "y";
					break;
					case "110011": encoded = encoded + "z";
					break;
					case "110100": encoded = encoded + "0";
					break;
					case "110101": encoded = encoded + "1";
					break;
					case "110110": encoded = encoded + "2";
					break;
					case "110111": encoded = encoded + "3";
					break;
					case "111000": encoded = encoded + "4";
					break;	
					case "111001": encoded = encoded + "5";
					break;
					case "111010": encoded = encoded + "6";
					break;
					case "111011": encoded = encoded + "7";
					break;
					case "111100": encoded = encoded + "8";
					break;
					case "111101": encoded = encoded + "9";
					break;
					case "111110": encoded = encoded + "+";
					break;
					case "111111": encoded = encoded + "/";
					break;
				default: encoded = encoded + "=";
				break;

				}
				six = "";
	
			}
		}
		
		return encoded;
		}
}



